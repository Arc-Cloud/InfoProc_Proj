
nios_code.elf:     file format elf32-littlenios2
nios_code.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000006b4 memsz 0x000006b4 flags r-x
    LOAD off    0x000016d4 vaddr 0x000106d4 paddr 0x00010744 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x000017b4 vaddr 0x000107b4 paddr 0x000107b4 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00001744  2**0
                  CONTENTS
  2 .text         000006a8  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000000c  000106c8  000106c8  000016c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  000106d4  00010744  000016d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000107b4  000107b4  000017b4  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  000107c0  000107c0  00001744  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001b0  00000000  00000000  00001768  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000016e3  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000009a6  00000000  00000000  00002ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000008c1  00000000  00000000  000039a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000024c  00000000  00000000  00004264  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000006b8  00000000  00000000  000044b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000322  00000000  00000000  00004b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00004e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000b8  00000000  00000000  00004ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005e52  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00005e55  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005e58  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00005e59  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00005e5a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00005e63  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00005e6c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00005e75  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  00005e7d  2**0
                  CONTENTS, READONLY
 26 .jdi          00004903  00000000  00000000  00005eb6  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007291b  00000000  00000000  0000a7b9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
000106c8 l    d  .rodata	00000000 .rodata
000106d4 l    d  .rwdata	00000000 .rwdata
000107b4 l    d  .bss	00000000 .bss
000107c0 l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_code_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000106b4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00010588 g     F .text	0000002c alt_main
00010744 g       *ABS*	00000000 __flash_rwdata_start
00010134 g     F .text	0000002c hexToBits
0001005c g     F .text	0000001c toHex
0001072c g     O .rwdata	00000004 jtag_uart
000106c0 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000107b8 g     O .bss	00000004 alt_argv
0001872c g       *ABS*	00000000 _gp
000106d4 g     O .rwdata	00000030 alt_fd_list
00010078 g     F .text	00000068 printAlt16
00010620 g     F .text	0000005c altera_avalon_jtag_uart_read
00010730 g     O .rwdata	00000004 alt_max_fd
000107c0 g       *ABS*	00000000 __bss_end
00010464 g     F .text	00000044 alt_getchar
00010704 g     O .rwdata	00000028 alt_dev_null
000106b0 g     F .text	00000004 alt_dcache_flush_all
00010744 g       *ABS*	00000000 __ram_rwdata_end
00010734 g     O .rwdata	00000008 alt_dev_list
000106d4 g       *ABS*	00000000 __ram_rodata_end
000107c0 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
0001067c g     F .text	00000034 altera_avalon_jtag_uart_write
00010020 g     F .text	0000003c _start
0001061c g     F .text	00000004 alt_sys_init
000106d4 g       *ABS*	00000000 __ram_rwdata_start
000106c8 g       *ABS*	00000000 __ram_rodata_start
000107c0 g       *ABS*	00000000 __alt_stack_base
000100e0 g     F .text	00000054 printAlt12
000107b4 g       *ABS*	00000000 __bss_start
00010160 g     F .text	00000304 main
000107b4 g     O .bss	00000004 alt_envp
000106c8 g       *ABS*	00000000 __flash_rodata_start
000105fc g     F .text	00000020 alt_irq_init
000107bc g     O .bss	00000004 alt_argc
0001073c g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010744 g       *ABS*	00000000 _edata
000107c0 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010000 g       *ABS*	00000000 __alt_mem_memory
00020000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
000105b4 g     F .text	00000048 alt_putchar
000106bc g     F .text	00000004 alt_icache_flush_all
000104a8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a1cb14 	ori	gp,gp,34604
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1081ed14 	ori	r2,r2,1972

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c1f014 	ori	r3,r3,1984

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00104a80 	call	104a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00105880 	call	10588 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff0058>

0001005c <toHex>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_stdio.h"

alt_u8 toHex(alt_u8 val) {
	if (val < 10) return '0' + val;
   1005c:	20803fcc 	andi	r2,r4,255
   10060:	00c00244 	movi	r3,9
   10064:	18800236 	bltu	r3,r2,10070 <toHex+0x14>
   10068:	20800c04 	addi	r2,r4,48
   1006c:	f800283a 	ret
	else return ('a' - 10) + val;
   10070:	208015c4 	addi	r2,r4,87
}
   10074:	f800283a 	ret

00010078 <printAlt16>:

void printAlt16(const alt_16 val) {
   10078:	defffe04 	addi	sp,sp,-8
   1007c:	dc000015 	stw	r16,0(sp)
   10080:	2021883a 	mov	r16,r4
	alt_putchar(toHex((val & 0xf000) >> 12));
   10084:	213c000c 	andi	r4,r4,61440
   10088:	2008d33a 	srli	r4,r4,12
alt_u8 toHex(alt_u8 val) {
	if (val < 10) return '0' + val;
	else return ('a' - 10) + val;
}

void printAlt16(const alt_16 val) {
   1008c:	dfc00115 	stw	ra,4(sp)
	alt_putchar(toHex((val & 0xf000) >> 12));
   10090:	001005c0 	call	1005c <toHex>
   10094:	11003fcc 	andi	r4,r2,255
   10098:	00105b40 	call	105b4 <alt_putchar>
	alt_putchar(toHex((val & 0x0f00) >> 8));
   1009c:	8103c00c 	andi	r4,r16,3840
   100a0:	2008d23a 	srli	r4,r4,8
   100a4:	001005c0 	call	1005c <toHex>
   100a8:	11003fcc 	andi	r4,r2,255
   100ac:	00105b40 	call	105b4 <alt_putchar>
	alt_putchar(toHex((val & 0x00f0) >> 4));
   100b0:	81003c0c 	andi	r4,r16,240
   100b4:	2008d13a 	srli	r4,r4,4
   100b8:	001005c0 	call	1005c <toHex>
   100bc:	11003fcc 	andi	r4,r2,255
   100c0:	00105b40 	call	105b4 <alt_putchar>
	alt_putchar(toHex(val & 0x000f));
   100c4:	810003cc 	andi	r4,r16,15
   100c8:	001005c0 	call	1005c <toHex>
   100cc:	11003fcc 	andi	r4,r2,255
}
   100d0:	dfc00117 	ldw	ra,4(sp)
   100d4:	dc000017 	ldw	r16,0(sp)
   100d8:	dec00204 	addi	sp,sp,8

void printAlt16(const alt_16 val) {
	alt_putchar(toHex((val & 0xf000) >> 12));
	alt_putchar(toHex((val & 0x0f00) >> 8));
	alt_putchar(toHex((val & 0x00f0) >> 4));
	alt_putchar(toHex(val & 0x000f));
   100dc:	00105b41 	jmpi	105b4 <alt_putchar>

000100e0 <printAlt12>:
}

void printAlt12(const alt_16 val) {
   100e0:	defffe04 	addi	sp,sp,-8
   100e4:	dc000015 	stw	r16,0(sp)
   100e8:	2021883a 	mov	r16,r4
	alt_putchar(toHex((val & 0x0f00) >> 8));
   100ec:	2103c00c 	andi	r4,r4,3840
   100f0:	2008d23a 	srli	r4,r4,8
	alt_putchar(toHex((val & 0x0f00) >> 8));
	alt_putchar(toHex((val & 0x00f0) >> 4));
	alt_putchar(toHex(val & 0x000f));
}

void printAlt12(const alt_16 val) {
   100f4:	dfc00115 	stw	ra,4(sp)
	alt_putchar(toHex((val & 0x0f00) >> 8));
   100f8:	001005c0 	call	1005c <toHex>
   100fc:	11003fcc 	andi	r4,r2,255
   10100:	00105b40 	call	105b4 <alt_putchar>
	alt_putchar(toHex((val & 0x00f0) >> 4));
   10104:	81003c0c 	andi	r4,r16,240
   10108:	2008d13a 	srli	r4,r4,4
   1010c:	001005c0 	call	1005c <toHex>
   10110:	11003fcc 	andi	r4,r2,255
   10114:	00105b40 	call	105b4 <alt_putchar>
	alt_putchar(toHex(val & 0x000f));
   10118:	810003cc 	andi	r4,r16,15
   1011c:	001005c0 	call	1005c <toHex>
   10120:	11003fcc 	andi	r4,r2,255
}
   10124:	dfc00117 	ldw	ra,4(sp)
   10128:	dc000017 	ldw	r16,0(sp)
   1012c:	dec00204 	addi	sp,sp,8
}

void printAlt12(const alt_16 val) {
	alt_putchar(toHex((val & 0x0f00) >> 8));
	alt_putchar(toHex((val & 0x00f0) >> 4));
	alt_putchar(toHex(val & 0x000f));
   10130:	00105b41 	jmpi	105b4 <alt_putchar>

00010134 <hexToBits>:
}

alt_u8 hexToBits(alt_u8 hex) {
	if (hex == '/') return 0xff;
   10134:	20803fcc 	andi	r2,r4,255
   10138:	00c00bc4 	movi	r3,47
   1013c:	10c00626 	beq	r2,r3,10158 <hexToBits+0x24>
	if (hex >= 'a') return hex - ('a' - 10);
   10140:	00c01804 	movi	r3,96
   10144:	1880022e 	bgeu	r3,r2,10150 <hexToBits+0x1c>
   10148:	20bfea44 	addi	r2,r4,-87
   1014c:	f800283a 	ret
	return hex - '0';
   10150:	20bff404 	addi	r2,r4,-48
   10154:	f800283a 	ret
	alt_putchar(toHex((val & 0x00f0) >> 4));
	alt_putchar(toHex(val & 0x000f));
}

alt_u8 hexToBits(alt_u8 hex) {
	if (hex == '/') return 0xff;
   10158:	00bfffc4 	movi	r2,-1
	if (hex >= 'a') return hex - ('a' - 10);
	return hex - '0';
}
   1015c:	f800283a 	ret

00010160 <main>:

int main()
{
   10160:	defff904 	addi	sp,sp,-28
   10164:	dd000415 	stw	r20,16(sp)
   10168:	dcc00315 	stw	r19,12(sp)
   1016c:	dc800215 	stw	r18,8(sp)
   10170:	dc400115 	stw	r17,4(sp)
		while (hexToBits(alt_getchar()) != 0xff) {}
		val = 0;
		val = hexToBits(alt_getchar()); 					// Reads bits [0:3]
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [4:7]
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, val >> 1);	// Writes bits [0:6]
   10174:	050000b4 	movhi	r20,2
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [8:11]
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [12:15]
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, val >> 2);	// Writes bits [7:13]
   10178:	04c000b4 	movhi	r19,2
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [16:19]
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [20:23]
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, val >> 3);	// Writes bits [14:20]
   1017c:	048000b4 	movhi	r18,2
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [24:27]
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, val);		// Writes bits [21:27]
   10180:	044000b4 	movhi	r17,2
	if (hex >= 'a') return hex - ('a' - 10);
	return hex - '0';
}

int main()
{
   10184:	dfc00615 	stw	ra,24(sp)
   10188:	dd400515 	stw	r21,20(sp)
   1018c:	dc000015 	stw	r16,0(sp)
		while (hexToBits(alt_getchar()) != 0xff) {}
		val = 0;
		val = hexToBits(alt_getchar()); 					// Reads bits [0:3]
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [4:7]
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, val >> 1);	// Writes bits [0:6]
   10190:	a5041c04 	addi	r20,r20,4208
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [8:11]
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [12:15]
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, val >> 2);	// Writes bits [7:13]
   10194:	9cc41804 	addi	r19,r19,4192
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [16:19]
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [20:23]
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, val >> 3);	// Writes bits [14:20]
   10198:	94840004 	addi	r18,r18,4096
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [24:27]
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, val);		// Writes bits [21:27]
   1019c:	8c441404 	addi	r17,r17,4176
{
	while (1) {
		alt_16 val;

		// Inputs
		while (hexToBits(alt_getchar()) != 0xff) {}
   101a0:	04003fc4 	movi	r16,255
   101a4:	00104640 	call	10464 <alt_getchar>
   101a8:	11003fcc 	andi	r4,r2,255
   101ac:	00101340 	call	10134 <hexToBits>
   101b0:	10803fcc 	andi	r2,r2,255
   101b4:	143ffb1e 	bne	r2,r16,101a4 <__alt_data_end+0xffff01a4>
		val = 0;
		val = hexToBits(alt_getchar()); 					// Reads bits [0:3]
   101b8:	00104640 	call	10464 <alt_getchar>
   101bc:	11003fcc 	andi	r4,r2,255
   101c0:	00101340 	call	10134 <hexToBits>
   101c4:	102b883a 	mov	r21,r2
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [4:7]
   101c8:	ad403fcc 	andi	r21,r21,255
   101cc:	00104640 	call	10464 <alt_getchar>
   101d0:	11003fcc 	andi	r4,r2,255
   101d4:	a82a913a 	slli	r21,r21,4
   101d8:	00101340 	call	10134 <hexToBits>
   101dc:	10803fcc 	andi	r2,r2,255
   101e0:	a8ab883a 	add	r21,r21,r2
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, val >> 1);	// Writes bits [0:6]
   101e4:	a8bfffcc 	andi	r2,r21,65535
   101e8:	10a0001c 	xori	r2,r2,32768
   101ec:	10a00004 	addi	r2,r2,-32768
   101f0:	1005d07a 	srai	r2,r2,1
   101f4:	a0800035 	stwio	r2,0(r20)
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [8:11]
   101f8:	00104640 	call	10464 <alt_getchar>
   101fc:	11003fcc 	andi	r4,r2,255
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [12:15]
   10200:	ad7fffcc 	andi	r21,r21,65535
		val = hexToBits(alt_getchar()); 					// Reads bits [0:3]
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [4:7]
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, val >> 1);	// Writes bits [0:6]
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [8:11]
   10204:	00101340 	call	10134 <hexToBits>
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [12:15]
   10208:	a82a913a 	slli	r21,r21,4
		val = hexToBits(alt_getchar()); 					// Reads bits [0:3]
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [4:7]
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, val >> 1);	// Writes bits [0:6]
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [8:11]
   1020c:	1021883a 	mov	r16,r2
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [12:15]
   10210:	84003fcc 	andi	r16,r16,255
   10214:	ac21883a 	add	r16,r21,r16
   10218:	843fffcc 	andi	r16,r16,65535
   1021c:	8420001c 	xori	r16,r16,32768
   10220:	00104640 	call	10464 <alt_getchar>
   10224:	84200004 	addi	r16,r16,-32768
   10228:	11003fcc 	andi	r4,r2,255
   1022c:	8020913a 	slli	r16,r16,4
   10230:	00101340 	call	10134 <hexToBits>
   10234:	10803fcc 	andi	r2,r2,255
   10238:	80a1883a 	add	r16,r16,r2
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, val >> 2);	// Writes bits [7:13]
   1023c:	843fffcc 	andi	r16,r16,65535
   10240:	8420001c 	xori	r16,r16,32768
   10244:	84200004 	addi	r16,r16,-32768
   10248:	8005d0ba 	srai	r2,r16,2
   1024c:	98800035 	stwio	r2,0(r19)
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [16:19]
   10250:	00104640 	call	10464 <alt_getchar>
   10254:	11003fcc 	andi	r4,r2,255
   10258:	8020913a 	slli	r16,r16,4
   1025c:	00101340 	call	10134 <hexToBits>
   10260:	10803fcc 	andi	r2,r2,255
   10264:	80a1883a 	add	r16,r16,r2
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [20:23]
   10268:	843fffcc 	andi	r16,r16,65535
   1026c:	8420001c 	xori	r16,r16,32768
   10270:	00104640 	call	10464 <alt_getchar>
   10274:	84200004 	addi	r16,r16,-32768
   10278:	11003fcc 	andi	r4,r2,255
   1027c:	802a913a 	slli	r21,r16,4
   10280:	00101340 	call	10134 <hexToBits>
   10284:	10803fcc 	andi	r2,r2,255
   10288:	a8ab883a 	add	r21,r21,r2
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, val >> 3);	// Writes bits [14:20]
   1028c:	ad7fffcc 	andi	r21,r21,65535
   10290:	ad60001c 	xori	r21,r21,32768
   10294:	ad600004 	addi	r21,r21,-32768
   10298:	a805d0fa 	srai	r2,r21,3
   1029c:	90800035 	stwio	r2,0(r18)
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [24:27]
   102a0:	00104640 	call	10464 <alt_getchar>
   102a4:	11003fcc 	andi	r4,r2,255
   102a8:	a82a913a 	slli	r21,r21,4
   102ac:	00101340 	call	10134 <hexToBits>
   102b0:	10803fcc 	andi	r2,r2,255
   102b4:	a8ab883a 	add	r21,r21,r2
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, val);		// Writes bits [21:27]
   102b8:	ad7fffcc 	andi	r21,r21,65535
   102bc:	ad60001c 	xori	r21,r21,32768
   102c0:	ad600004 	addi	r21,r21,-32768
   102c4:	8d400035 	stwio	r21,0(r17)
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [28:31]
   102c8:	00104640 	call	10464 <alt_getchar>
   102cc:	11003fcc 	andi	r4,r2,255
   102d0:	00101340 	call	10134 <hexToBits>
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [32:35]
   102d4:	a82a913a 	slli	r21,r21,4
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, val >> 3);	// Writes bits [14:20]
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [24:27]
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, val);		// Writes bits [21:27]
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [28:31]
   102d8:	1021883a 	mov	r16,r2
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [32:35]
   102dc:	84003fcc 	andi	r16,r16,255
   102e0:	ac21883a 	add	r16,r21,r16
   102e4:	843fffcc 	andi	r16,r16,65535
   102e8:	8420001c 	xori	r16,r16,32768
   102ec:	00104640 	call	10464 <alt_getchar>
   102f0:	84200004 	addi	r16,r16,-32768
   102f4:	11003fcc 	andi	r4,r2,255
   102f8:	8020913a 	slli	r16,r16,4
   102fc:	00101340 	call	10134 <hexToBits>
   10300:	10803fcc 	andi	r2,r2,255
   10304:	80a1883a 	add	r16,r16,r2
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, val >> 1);	// Writes bits [28:34]
   10308:	843fffcc 	andi	r16,r16,65535
   1030c:	8420001c 	xori	r16,r16,32768
   10310:	84200004 	addi	r16,r16,-32768
   10314:	8007d07a 	srai	r3,r16,1
   10318:	008000b4 	movhi	r2,2
   1031c:	10841004 	addi	r2,r2,4160
   10320:	10c00035 	stwio	r3,0(r2)
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [36:39]
   10324:	00104640 	call	10464 <alt_getchar>
   10328:	11003fcc 	andi	r4,r2,255
   1032c:	8020913a 	slli	r16,r16,4
   10330:	00101340 	call	10134 <hexToBits>
   10334:	10803fcc 	andi	r2,r2,255
   10338:	80a1883a 	add	r16,r16,r2
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [40:43]
   1033c:	843fffcc 	andi	r16,r16,65535
   10340:	8420001c 	xori	r16,r16,32768
   10344:	00104640 	call	10464 <alt_getchar>
   10348:	84200004 	addi	r16,r16,-32768
   1034c:	11003fcc 	andi	r4,r2,255
   10350:	8020913a 	slli	r16,r16,4
   10354:	00101340 	call	10134 <hexToBits>
   10358:	10803fcc 	andi	r2,r2,255
   1035c:	80a1883a 	add	r16,r16,r2
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, val >> 2);	// Writes bits [35:41]
   10360:	843fffcc 	andi	r16,r16,65535
   10364:	8420001c 	xori	r16,r16,32768
   10368:	84200004 	addi	r16,r16,-32768
   1036c:	8007d0ba 	srai	r3,r16,2
   10370:	008000b4 	movhi	r2,2
   10374:	10840c04 	addi	r2,r2,4144
   10378:	10c00035 	stwio	r3,0(r2)
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [44:47]
   1037c:	00104640 	call	10464 <alt_getchar>
   10380:	11003fcc 	andi	r4,r2,255
   10384:	8020913a 	slli	r16,r16,4
   10388:	00101340 	call	10134 <hexToBits>
   1038c:	10803fcc 	andi	r2,r2,255
   10390:	80a1883a 	add	r16,r16,r2
		val <<= 4;
		val += hexToBits(alt_getchar()); 					// Reads bits [48:51]
   10394:	843fffcc 	andi	r16,r16,65535
   10398:	8420001c 	xori	r16,r16,32768
   1039c:	00104640 	call	10464 <alt_getchar>
   103a0:	84200004 	addi	r16,r16,-32768
   103a4:	11003fcc 	andi	r4,r2,255
   103a8:	8020913a 	slli	r16,r16,4
   103ac:	00101340 	call	10134 <hexToBits>
   103b0:	10803fcc 	andi	r2,r2,255
   103b4:	80a1883a 	add	r16,r16,r2
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, val);		// Writes bits [42:51]
   103b8:	843fffcc 	andi	r16,r16,65535
   103bc:	8420001c 	xori	r16,r16,32768
   103c0:	008000b4 	movhi	r2,2
   103c4:	84200004 	addi	r16,r16,-32768
   103c8:	10842004 	addi	r2,r2,4224
   103cc:	14000035 	stwio	r16,0(r2)

		// Outputs
		val = IORD_ALTERA_AVALON_PIO_DATA(FILTER_X_BASE);
   103d0:	008000b4 	movhi	r2,2
   103d4:	10842c04 	addi	r2,r2,4272
   103d8:	11000037 	ldwio	r4,0(r2)
		printAlt16(val);
   103dc:	213fffcc 	andi	r4,r4,65535
   103e0:	2120001c 	xori	r4,r4,32768
   103e4:	21200004 	addi	r4,r4,-32768
   103e8:	00100780 	call	10078 <printAlt16>
		val = IORD_ALTERA_AVALON_PIO_DATA(FILTER_Y_BASE);
   103ec:	008000b4 	movhi	r2,2
   103f0:	10842804 	addi	r2,r2,4256
   103f4:	11000037 	ldwio	r4,0(r2)
		printAlt16(val);
   103f8:	213fffcc 	andi	r4,r4,65535
   103fc:	2120001c 	xori	r4,r4,32768
   10400:	21200004 	addi	r4,r4,-32768
   10404:	00100780 	call	10078 <printAlt16>
		val = IORD_ALTERA_AVALON_PIO_DATA(FILTER_Z_BASE);
   10408:	008000b4 	movhi	r2,2
   1040c:	10842404 	addi	r2,r2,4240
   10410:	11000037 	ldwio	r4,0(r2)
		printAlt16(val);
   10414:	213fffcc 	andi	r4,r4,65535
   10418:	2120001c 	xori	r4,r4,32768
   1041c:	21200004 	addi	r4,r4,-32768
   10420:	00100780 	call	10078 <printAlt16>
		val = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE) << 10;
   10424:	008000b4 	movhi	r2,2
   10428:	10840804 	addi	r2,r2,4128
   1042c:	10800037 	ldwio	r2,0(r2)
		val += IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x3ff;
   10430:	00c000b4 	movhi	r3,2
   10434:	18c40404 	addi	r3,r3,4112
   10438:	19000037 	ldwio	r4,0(r3)
		printAlt12(val);
   1043c:	100492ba 	slli	r2,r2,10
   10440:	2100ffcc 	andi	r4,r4,1023
   10444:	2089883a 	add	r4,r4,r2
   10448:	213fffcc 	andi	r4,r4,65535
   1044c:	2120001c 	xori	r4,r4,32768
   10450:	21200004 	addi	r4,r4,-32768
   10454:	00100e00 	call	100e0 <printAlt12>
		alt_putchar('\n');
   10458:	01000284 	movi	r4,10
   1045c:	00105b40 	call	105b4 <alt_putchar>
  }
   10460:	003f4f06 	br	101a0 <__alt_data_end+0xffff01a0>

00010464 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   10464:	00800074 	movhi	r2,1
   10468:	1081b504 	addi	r2,r2,1748
   1046c:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   10470:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   10474:	01000074 	movhi	r4,1
   10478:	01800044 	movi	r6,1
   1047c:	d80b883a 	mov	r5,sp
   10480:	2101cb04 	addi	r4,r4,1836
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   10484:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   10488:	00106200 	call	10620 <altera_avalon_jtag_uart_read>
   1048c:	0080020e 	bge	zero,r2,10498 <alt_getchar+0x34>
        return -1;
    }
    return c;
   10490:	d8800007 	ldb	r2,0(sp)
   10494:	00000106 	br	1049c <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
   10498:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
   1049c:	dfc00117 	ldw	ra,4(sp)
   104a0:	dec00204 	addi	sp,sp,8
   104a4:	f800283a 	ret

000104a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   104a8:	deffff04 	addi	sp,sp,-4
   104ac:	01000074 	movhi	r4,1
   104b0:	01400074 	movhi	r5,1
   104b4:	dfc00015 	stw	ra,0(sp)
   104b8:	2101b504 	addi	r4,r4,1748
   104bc:	2941d104 	addi	r5,r5,1860

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   104c0:	2140061e 	bne	r4,r5,104dc <alt_load+0x34>
   104c4:	01000074 	movhi	r4,1
   104c8:	01400074 	movhi	r5,1
   104cc:	21000804 	addi	r4,r4,32
   104d0:	29400804 	addi	r5,r5,32
   104d4:	2140121e 	bne	r4,r5,10520 <alt_load+0x78>
   104d8:	00000b06 	br	10508 <alt_load+0x60>
   104dc:	00c00074 	movhi	r3,1
   104e0:	18c1d104 	addi	r3,r3,1860
   104e4:	1907c83a 	sub	r3,r3,r4
   104e8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   104ec:	10fff526 	beq	r2,r3,104c4 <__alt_data_end+0xffff04c4>
    {
      *to++ = *from++;
   104f0:	114f883a 	add	r7,r2,r5
   104f4:	39c00017 	ldw	r7,0(r7)
   104f8:	110d883a 	add	r6,r2,r4
   104fc:	10800104 	addi	r2,r2,4
   10500:	31c00015 	stw	r7,0(r6)
   10504:	003ff906 	br	104ec <__alt_data_end+0xffff04ec>
   10508:	01000074 	movhi	r4,1
   1050c:	01400074 	movhi	r5,1
   10510:	2101b204 	addi	r4,r4,1736
   10514:	2941b204 	addi	r5,r5,1736

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10518:	2140101e 	bne	r4,r5,1055c <alt_load+0xb4>
   1051c:	00000b06 	br	1054c <alt_load+0xa4>
   10520:	00c00074 	movhi	r3,1
   10524:	18c00804 	addi	r3,r3,32
   10528:	1907c83a 	sub	r3,r3,r4
   1052c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10530:	10fff526 	beq	r2,r3,10508 <__alt_data_end+0xffff0508>
    {
      *to++ = *from++;
   10534:	114f883a 	add	r7,r2,r5
   10538:	39c00017 	ldw	r7,0(r7)
   1053c:	110d883a 	add	r6,r2,r4
   10540:	10800104 	addi	r2,r2,4
   10544:	31c00015 	stw	r7,0(r6)
   10548:	003ff906 	br	10530 <__alt_data_end+0xffff0530>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1054c:	00106b00 	call	106b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10550:	dfc00017 	ldw	ra,0(sp)
   10554:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10558:	00106bc1 	jmpi	106bc <alt_icache_flush_all>
   1055c:	00c00074 	movhi	r3,1
   10560:	18c1b504 	addi	r3,r3,1748
   10564:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10568:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1056c:	18bff726 	beq	r3,r2,1054c <__alt_data_end+0xffff054c>
    {
      *to++ = *from++;
   10570:	114f883a 	add	r7,r2,r5
   10574:	39c00017 	ldw	r7,0(r7)
   10578:	110d883a 	add	r6,r2,r4
   1057c:	10800104 	addi	r2,r2,4
   10580:	31c00015 	stw	r7,0(r6)
   10584:	003ff906 	br	1056c <__alt_data_end+0xffff056c>

00010588 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10588:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1058c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10590:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10594:	00105fc0 	call	105fc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10598:	001061c0 	call	1061c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1059c:	d1a02217 	ldw	r6,-32632(gp)
   105a0:	d1602317 	ldw	r5,-32628(gp)
   105a4:	d1202417 	ldw	r4,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   105a8:	dfc00017 	ldw	ra,0(sp)
   105ac:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   105b0:	00101601 	jmpi	10160 <main>

000105b4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   105b4:	defffd04 	addi	sp,sp,-12
   105b8:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   105bc:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   105c0:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   105c4:	01000074 	movhi	r4,1
   105c8:	000f883a 	mov	r7,zero
   105cc:	01800044 	movi	r6,1
   105d0:	d80b883a 	mov	r5,sp
   105d4:	2101cb04 	addi	r4,r4,1836
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   105d8:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   105dc:	001067c0 	call	1067c <altera_avalon_jtag_uart_write>
   105e0:	00ffffc4 	movi	r3,-1
   105e4:	10c00126 	beq	r2,r3,105ec <alt_putchar+0x38>
        return -1;
    }
    return c;
   105e8:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   105ec:	dfc00217 	ldw	ra,8(sp)
   105f0:	dc000117 	ldw	r16,4(sp)
   105f4:	dec00304 	addi	sp,sp,12
   105f8:	f800283a 	ret

000105fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   105fc:	deffff04 	addi	sp,sp,-4
   10600:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10604:	00106c00 	call	106c0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10608:	00800044 	movi	r2,1
   1060c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10610:	dfc00017 	ldw	ra,0(sp)
   10614:	dec00104 	addi	sp,sp,4
   10618:	f800283a 	ret

0001061c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1061c:	f800283a 	ret

00010620 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
   10620:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
   10624:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   10628:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   1062c:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   10630:	11800b2e 	bgeu	r2,r6,10660 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10634:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   10638:	1a60000c 	andi	r9,r3,32768
   1063c:	48000326 	beq	r9,zero,1064c <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10640:	10c00005 	stb	r3,0(r2)
   10644:	10800044 	addi	r2,r2,1
   10648:	003ff906 	br	10630 <__alt_data_end+0xffff0630>
    else if (ptr != buffer)
   1064c:	11400226 	beq	r2,r5,10658 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
   10650:	1145c83a 	sub	r2,r2,r5
   10654:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   10658:	403ff526 	beq	r8,zero,10630 <__alt_data_end+0xffff0630>
   1065c:	00000106 	br	10664 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
   10660:	117ffb1e 	bne	r2,r5,10650 <__alt_data_end+0xffff0650>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   10664:	39d0000c 	andi	r7,r7,16384
   10668:	3800021e 	bne	r7,zero,10674 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
   1066c:	00bffec4 	movi	r2,-5
   10670:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   10674:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
   10678:	f800283a 	ret

0001067c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   1067c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10680:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   10684:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10688:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   1068c:	2980072e 	bgeu	r5,r6,106ac <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10690:	38c00037 	ldwio	r3,0(r7)
   10694:	18ffffec 	andhi	r3,r3,65535
   10698:	183ffc26 	beq	r3,zero,1068c <__alt_data_end+0xffff068c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1069c:	28c00007 	ldb	r3,0(r5)
   106a0:	20c00035 	stwio	r3,0(r4)
   106a4:	29400044 	addi	r5,r5,1
   106a8:	003ff806 	br	1068c <__alt_data_end+0xffff068c>

  return count;
}
   106ac:	f800283a 	ret

000106b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   106b0:	f800283a 	ret

000106b4 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   106b4:	3005883a 	mov	r2,r6
   106b8:	f800283a 	ret

000106bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   106bc:	f800283a 	ret

000106c0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   106c0:	000170fa 	wrctl	ienable,zero
   106c4:	f800283a 	ret
